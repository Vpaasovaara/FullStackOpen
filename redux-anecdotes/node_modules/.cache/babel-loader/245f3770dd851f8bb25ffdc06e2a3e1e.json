{"ast":null,"code":"// 6.10 anekdootit, step8\nconst notificationReducer = (state = 'This is a notification', action) => {\n  switch (action.type) {\n    case 'NOTIFICATION_SET':\n      return action.notification;\n\n    case 'NOTIFICATION_FADE':\n      return action.notification;\n\n    default:\n      return state;\n  }\n};\n\nexport const notificationSet = (content, time) => {\n  return dispatch => {\n    dispatch({\n      type: 'NOTIFICATION_SET',\n      notification: {\n        content: `${content}`,\n        visible: true\n      }\n    });\n    setTimeout(() => {\n      dispatch(notificationFade());\n    }, parseInt(time) * 1000);\n  };\n};\nexport const notificationFade = () => {\n  return {\n    type: 'NOTIFICATION_FADE',\n    notification: {\n      visible: false\n    }\n  };\n};\nexport default notificationReducer;","map":{"version":3,"sources":["/home/ville/koodaus/fullStackOpen/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["notificationReducer","state","action","type","notification","notificationSet","content","time","dispatch","visible","setTimeout","notificationFade","parseInt"],"mappings":"AAGA;AACA,MAAMA,mBAAmB,GAAG,CAACC,KAAK,GAAG,wBAAT,EAAmCC,MAAnC,KAA8C;AACtE,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,kBAAL;AACI,aAAOD,MAAM,CAACE,YAAd;;AACJ,SAAK,mBAAL;AACI,aAAOF,MAAM,CAACE,YAAd;;AACJ;AACI,aAAOH,KAAP;AANR;AAQH,CATD;;AAWA,OAAO,MAAMI,eAAe,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AAC9C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAE,kBADD;AAELC,MAAAA,YAAY,EAAE;AACVE,QAAAA,OAAO,EAAG,GAAEA,OAAQ,EADV;AAEVG,QAAAA,OAAO,EAAE;AAFC;AAFT,KAAD,CAAR;AAOAC,IAAAA,UAAU,CAAC,MAAM;AACbF,MAAAA,QAAQ,CAACG,gBAAgB,EAAjB,CAAR;AACH,KAFS,EAEPC,QAAQ,CAACL,IAAD,CAAR,GAAiB,IAFV,CAAV;AAGH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMI,gBAAgB,GAAG,MAAM;AAClC,SAAO;AAAER,IAAAA,IAAI,EAAE,mBAAR;AACPC,IAAAA,YAAY,EAAE;AACVK,MAAAA,OAAO,EAAE;AADC;AADP,GAAP;AAKH,CANM;AAQP,eAAeT,mBAAf","sourcesContent":["\n\n\n// 6.10 anekdootit, step8\nconst notificationReducer = (state = 'This is a notification', action) => {\n    switch (action.type) {\n        case 'NOTIFICATION_SET':\n            return action.notification\n        case 'NOTIFICATION_FADE':\n            return action.notification\n        default:\n            return state\n    }\n}\n\nexport const notificationSet = (content, time) => {\n    return dispatch => {\n        dispatch({\n            type: 'NOTIFICATION_SET',\n            notification: { \n                content: `${content}`,\n                visible: true\n            }\n        })\n        setTimeout(() => {\n            dispatch(notificationFade())\n        }, parseInt(time) * 1000)\n    }\n}\n\nexport const notificationFade = () => {\n    return { type: 'NOTIFICATION_FADE',\n    notification: {\n        visible: false\n    }    \n}\n}\n\nexport default notificationReducer"]},"metadata":{},"sourceType":"module"}