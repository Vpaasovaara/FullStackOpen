{"ast":null,"code":"import anecdoteReducer from \"./reducers/anecdoteReducer\";\nimport notificationReducer from \"./reducers/notificationReducer\";\nimport filterReducer from \"./reducers/filterReducer\";\nimport { composedWithDevTools } from 'redux-devtools-extension';\nimport { createStore, combineReducers } from 'redux';\nimport anecdoteService from \"./services/anecdotes\";\nconst reducer = combineReducers({\n  anecdotes: anecdoteReducer,\n  notification: notificationReducer,\n  filter: filterReducer\n});\nconst store = createStore(reducer, composedWithDevTools);\nanecdoteService.getAll().then(notes => notes.forEach(note => {\n  //dispatch({ type: 'NEW_ANECDOTE', content: note })\n  //dispatch(newAnecdote(note))\n  console.log(note);\n}));\nexport default store;","map":{"version":3,"sources":["/home/ville/koodaus/fullStackOpen/redux-anecdotes/src/store.js"],"names":["anecdoteReducer","notificationReducer","filterReducer","composedWithDevTools","createStore","combineReducers","anecdoteService","reducer","anecdotes","notification","filter","store","getAll","then","notes","forEach","note","console","log"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA,MAAMC,OAAO,GAAGF,eAAe,CAAC;AAC5BG,EAAAA,SAAS,EAAER,eADiB;AAE5BS,EAAAA,YAAY,EAAER,mBAFc;AAG5BS,EAAAA,MAAM,EAAER;AAHoB,CAAD,CAA/B;AAMA,MAAMS,KAAK,GAAGP,WAAW,CAACG,OAAD,EAAUJ,oBAAV,CAAzB;AAEAG,eAAe,CAACM,MAAhB,GAAyBC,IAAzB,CAA8BC,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcC,IAAI,IAAI;AACzD;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,CAJsC,CAAvC;AAMA,eAAeL,KAAf","sourcesContent":["import anecdoteReducer from \"./reducers/anecdoteReducer\"\nimport notificationReducer from \"./reducers/notificationReducer\"\nimport filterReducer from \"./reducers/filterReducer\"\nimport { composedWithDevTools } from 'redux-devtools-extension'\nimport { createStore, combineReducers } from 'redux'\nimport anecdoteService from \"./services/anecdotes\"\n\nconst reducer = combineReducers({\n    anecdotes: anecdoteReducer,\n    notification: notificationReducer,\n    filter: filterReducer\n})\n\nconst store = createStore(reducer, composedWithDevTools)\n\nanecdoteService.getAll().then(notes => notes.forEach(note => {\n    //dispatch({ type: 'NEW_ANECDOTE', content: note })\n    //dispatch(newAnecdote(note))\n    console.log(note)\n}))\n\nexport default store"]},"metadata":{},"sourceType":"module"}